# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chess_game_pb2 as chess__game__pb2


class ChessGameStub(object):
    """service ran on the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.check_state = channel.unary_unary(
                '/chess_game.ChessGame/check_state',
                request_serializer=chess__game__pb2.Name.SerializeToString,
                response_deserializer=chess__game__pb2.acknowledge.FromString,
                )
        self.update_state = channel.unary_unary(
                '/chess_game.ChessGame/update_state',
                request_serializer=chess__game__pb2.Name.SerializeToString,
                response_deserializer=chess__game__pb2.acknowledge.FromString,
                )
        self.print_board = channel.unary_unary(
                '/chess_game.ChessGame/print_board',
                request_serializer=chess__game__pb2.Name.SerializeToString,
                response_deserializer=chess__game__pb2.acknowledge.FromString,
                )
        self.set_piece = channel.unary_unary(
                '/chess_game.ChessGame/set_piece',
                request_serializer=chess__game__pb2.Name.SerializeToString,
                response_deserializer=chess__game__pb2.Name.FromString,
                )
        self.move = channel.unary_unary(
                '/chess_game.ChessGame/move',
                request_serializer=chess__game__pb2.new_move.SerializeToString,
                response_deserializer=chess__game__pb2.acknowledge.FromString,
                )


class ChessGameServicer(object):
    """service ran on the server
    """

    def check_state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def print_board(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_piece(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def move(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChessGameServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'check_state': grpc.unary_unary_rpc_method_handler(
                    servicer.check_state,
                    request_deserializer=chess__game__pb2.Name.FromString,
                    response_serializer=chess__game__pb2.acknowledge.SerializeToString,
            ),
            'update_state': grpc.unary_unary_rpc_method_handler(
                    servicer.update_state,
                    request_deserializer=chess__game__pb2.Name.FromString,
                    response_serializer=chess__game__pb2.acknowledge.SerializeToString,
            ),
            'print_board': grpc.unary_unary_rpc_method_handler(
                    servicer.print_board,
                    request_deserializer=chess__game__pb2.Name.FromString,
                    response_serializer=chess__game__pb2.acknowledge.SerializeToString,
            ),
            'set_piece': grpc.unary_unary_rpc_method_handler(
                    servicer.set_piece,
                    request_deserializer=chess__game__pb2.Name.FromString,
                    response_serializer=chess__game__pb2.Name.SerializeToString,
            ),
            'move': grpc.unary_unary_rpc_method_handler(
                    servicer.move,
                    request_deserializer=chess__game__pb2.new_move.FromString,
                    response_serializer=chess__game__pb2.acknowledge.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chess_game.ChessGame', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChessGame(object):
    """service ran on the server
    """

    @staticmethod
    def check_state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chess_game.ChessGame/check_state',
            chess__game__pb2.Name.SerializeToString,
            chess__game__pb2.acknowledge.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chess_game.ChessGame/update_state',
            chess__game__pb2.Name.SerializeToString,
            chess__game__pb2.acknowledge.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def print_board(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chess_game.ChessGame/print_board',
            chess__game__pb2.Name.SerializeToString,
            chess__game__pb2.acknowledge.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_piece(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chess_game.ChessGame/set_piece',
            chess__game__pb2.Name.SerializeToString,
            chess__game__pb2.Name.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def move(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chess_game.ChessGame/move',
            chess__game__pb2.new_move.SerializeToString,
            chess__game__pb2.acknowledge.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
